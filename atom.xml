<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Windrivder.github.io</id>
    <title>Halo</title>
    <updated>2020-04-25T13:01:54.322Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Windrivder.github.io"/>
    <link rel="self" href="https://Windrivder.github.io/atom.xml"/>
    <subtitle>愿你在冷铁卷刃前，得以窥见天光。</subtitle>
    <logo>https://Windrivder.github.io/images/avatar.png</logo>
    <icon>https://Windrivder.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Halo</rights>
    <entry>
        <title type="html"><![CDATA[LeetCode - 两数之和]]></title>
        <id>https://Windrivder.github.io/93-d2A10n/</id>
        <link href="https://Windrivder.github.io/93-d2A10n/">
        </link>
        <updated>2019-11-25T11:32:52.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<pre><code>给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
</code></pre>
<p>题解:</p>
<p>python</p>
<pre><code class="language-python">class Solution:
    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:
        lookup = {}
        for index, num in enumerate(nums):
            other_num = target - num
            if other_num in lookup:
                return lookup.get(other_num, 0), index
            else:
                lookup[num] = index
</code></pre>
<p>go</p>
<pre><code class="language-go">func twoSum(nums []int, target int) []int {
    maps := make(map[int]int)
    result := make([]int, 0)
    for index, num := range nums {
        _, isTrue := maps[target - num]
        if isTrue {
            result = append(result, maps[target - num])
            result = append(result, index)
            break
        }
        maps[num] = index
    }
    return result
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Windrivder.github.io/MVCYuKMgH/</id>
        <link href="https://Windrivder.github.io/MVCYuKMgH/">
        </link>
        <updated>2019-11-18T14:54:27.000Z</updated>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 线程安全]]></title>
        <id>https://Windrivder.github.io/FGrATj71-/</id>
        <link href="https://Windrivder.github.io/FGrATj71-/">
        </link>
        <updated>2018-04-07T10:37:30.000Z</updated>
        <content type="html"><![CDATA[<p>Python 解释器由于是非线程安全的，所以解释器从线程内访问 Python 对象时，会去获取一个全局的强制锁，这就是 Python 中著名的 <strong>GIL（global interpreter lock）</strong>。</p>
<p>当多个线程同时进行，且共同修改同一个资源时，我们必须保证修改不会发生冲突，数据修改不会发生错误，也就是说，我们必须保证线程安全。</p>
<p>由于 GIL 的加持，是不是就意味着 Python 中的多线程并发都是线程安全的呢？答案是否定。我们还需要理解另一个概念：<strong>原子操作（atomic operation）</strong>。</p>
<p>原子操作，指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会切换到其他线程。</p>
<p>类似于<code>num += 1</code> 语句，在多线程并发下，就不是线程安全的，因为它不是原子操作：</p>
<pre><code class="language-python">from dis import dis

a = 0

def add():
    global a
    a = a + 1
    
dis(add)
</code></pre>
<p>执行结果如下：</p>
<pre><code>  9           0 LOAD_GLOBAL              0 (a)
              2 LOAD_CONST               1 (1)
              4 BINARY_ADD
              6 STORE_GLOBAL             0 (a)
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE
</code></pre>
<p>可以看到，Python 运行这段代码的步骤：<code>导入全局变量--&gt;导入常数--&gt;执行加法--&gt;存储变量...</code>。若在<code>BINARY_ADD</code>和<code>STORE_GLOBAL</code>之间切换了线程，那么就造成资源冲突了。</p>
<p>那些操作是线程安全的呢，<a href="https://docs.python.org/3.5/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe">Python 文档</a>中罗列了一些，可以看下。</p>
<pre><code class="language-python"># 线程安全
L.append(x)
L1.extend(L2)
x = L[i]
x = L.pop()
L1[i:j] = L2
L.sort()
x = y
x.field = y
D[x] = y
D1.update(D2)
D.keys()
</code></pre>
<p>从中我们可以总结一下，如果一段程序本身就是原子操作，那么它在 Python 的运行环境中，自动实现了线程安全，也就不需要上锁了。</p>
<p>值得注意的是，标准库中关于队列的实现，<code>Queue.Queue</code>内部实现<code>Condition</code>锁，主要用于线程之间的通信。而<code>collections.deque</code>和<code>list</code>是单纯存储数据的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 魔术方法]]></title>
        <id>https://Windrivder.github.io/8IaGL3ZNY/</id>
        <link href="https://Windrivder.github.io/8IaGL3ZNY/">
        </link>
        <updated>2018-04-06T13:42:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="构建和初始化">构建和初始化</h1>
<ul>
<li><code>__new__(cls, [...)</code></li>
<li><code>__init__(self, [...)</code></li>
<li><code>__del__(self)</code></li>
</ul>
<h1 id="比较运算符">比较运算符</h1>
<ul>
<li><code>__cmp__(self, other)</code>: 实现所有比较运算符</li>
<li><code>__eq__(self, other)</code>: <code>==</code></li>
<li><code>__ne__(self, other)</code>: <code>!=</code></li>
<li><code>__lt__(self, other)</code>: <code>&lt;</code></li>
<li><code>__gt__(self, other)</code>: <code>&gt;</code></li>
<li><code>__le__(self, other)</code>: <code>&lt;=</code></li>
<li><code>__ge__(self, other)</code>: <code>&gt;=</code></li>
</ul>
<h1 id="数值">数值</h1>
<ul>
<li><code>__pos__(self)</code>: <code>+some_object</code></li>
<li><code>__neg__(self)</code>: <code>-some_object</code></li>
<li><code>__abs__(self)</code>: <code>abs()</code></li>
<li><code>__invert__(self)</code>: <code>~</code></li>
<li><code>__round__(self, n)</code>: <code>round()</code></li>
<li><code>__floor__(self)</code>: <code>math.floor()</code></li>
<li><code>__ceil__(self)</code>: <code>math.ceil()</code></li>
<li><code>__trunc__(self)</code>: <code>math.trunc()</code></li>
</ul>
<h1 id="算术运算符">算术运算符</h1>
<ul>
<li><code>__add__(self, other)</code>: 实现加法</li>
<li><code>__sub__(self, other)</code>: 实现减法</li>
<li><code>__mul__(self, other)</code>: 实现乘法</li>
<li><code>__floordiv__(self, other)</code>: 使用<code>//</code>运算符实现整数除法</li>
<li><code>__div__(self, other)</code>: 使用<code>/</code>运算符实现除法</li>
<li><code>__truediv__(self, other)</code>: <code>from __future__ import division</code>有效</li>
<li><code>__mod__(self, other)</code>: 使用<code>%</code>运算符实现模</li>
<li><code>__divmod__(self, other)</code>: 使用<code>divmod()</code>内置函数实现长除法行为</li>
<li><code>__pow__</code>: 使用<code>**</code>运算符实现指数的行为</li>
<li><code>__lshift__(self, other)</code>: 使用<code>&lt;&lt;</code>运算符实现按位左移</li>
<li><code>__rshift__(self, other)</code>: 使用<code>&gt;&gt;</code>运算符实现按位右移</li>
<li><code>__and__(self, other)</code>: 按位实现并使用<code>&amp;</code>运算符</li>
<li><code>__or__(self, other)</code>: 按位实现或使用<code>|</code>运算符</li>
<li><code>__xor__(self, other)</code>: 使用<code>^</code>运算符实现按位异或</li>
</ul>
<h1 id="class">class</h1>
<ul>
<li><code>__str__(self)</code>: <code>str()</code></li>
<li><code>__repr__(self)</code>: 产生大多数机器可读的输出</li>
<li><code>__unicode__(self)</code></li>
<li><code>__format__(self, formatstr)</code></li>
<li><code>__hash__(self)</code></li>
<li><code>__nonzero__(self)</code></li>
<li><code>__dir__(self)</code></li>
<li><code>__sizeof__(self)</code></li>
</ul>
<h1 id="控制属性访问">控制属性访问</h1>
<ul>
<li><code>__getattr__(self, name)</code></li>
<li><code>__setattr__(self, name, value)</code></li>
<li><code>__delattr__(self, name)</code></li>
<li><code>__getattribute__(self, name)</code></li>
</ul>
<h1 id="自定义序列">自定义序列</h1>
<ul>
<li><code>__len__(self)</code></li>
<li><code>__getitem__(self, key)</code></li>
<li><code>__setitem__(self, key, value)</code></li>
<li><code>__delitem__(self, key)</code></li>
<li><code>__iter__(self)</code></li>
<li><code>__reversed__(self)</code></li>
<li><code>__contains__(self, item)</code></li>
<li><code>__missing__(self, key)</code></li>
</ul>
<h1 id="反射">反射</h1>
<ul>
<li><code>__instancecheck__(self, instance)</code>: <code>isinstance(instance, class)</code></li>
<li><code>__subclasscheck__(self, subclass)</code>: <code>issubclass(subclass, class)</code></li>
</ul>
<h1 id="可调用对象">可调用对象</h1>
<ul>
<li><code>__call__(self, [args...])</code></li>
</ul>
<h1 id="上下文管理">上下文管理</h1>
<ul>
<li><code>__enter__(self)</code></li>
<li><code>__exit__(self, exception_type, exception_value, traceback)</code></li>
</ul>
<h1 id="描述符">描述符</h1>
<ul>
<li><code>__get__</code></li>
<li><code>__set__</code></li>
<li><code>__delete__</code></li>
</ul>
<h1 id="对象复制">对象复制</h1>
<ul>
<li><code>__copy__</code></li>
<li><code>__deepcopy__</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 描述符]]></title>
        <id>https://Windrivder.github.io/GePMqHwFT/</id>
        <link href="https://Windrivder.github.io/GePMqHwFT/">
        </link>
        <updated>2018-04-05T12:23:14.000Z</updated>
        <content type="html"><![CDATA[<p>Python 2.2 引进了 Python 描述符，同时还引进了一些新的样式类，描述符具有诸多优点，诸如：<strong>保护属性不受修改、属性类型检查和自动更新某个依赖属性的值等</strong>。</p>
<p>实现描述符可通过两种方式：</p>
<ul>
<li>实现<code>__get__</code>，<code>__set__</code>，<code>__delete__</code>，描述符只读称为** 非数据描述符**，可读可写称为<strong>数据描述符</strong></li>
<li>通过轻量级的数据描述符函数<code>property()</code>，其使用装饰器的模式，可以将类方法当成属性来访问</li>
</ul>
<h1 id="属性查找">属性查找</h1>
<p>由于<code>__getattribute__</code>是实例查找属性的入口，查找优先级如下：</p>
<ol>
<li>类属性</li>
<li>数据描述符</li>
<li>实例属性</li>
<li>非数据描述符</li>
<li><code>__getattr__</code></li>
</ol>
<h1 id="魔术方法">魔术方法</h1>
<ul>
<li><code>__getattribute__</code>：该方法会被无条件调用，不管属性存不存在；一般情况下返回父类的同名方法来避免在方法中出现无限递归的情况</li>
<li><code>__getattr__</code>：当访问的对象属性不存在时调用，如果通过正常途径访问到了属性，那么<code>__getattr__</code>不会被调用</li>
<li><code>__getitem__</code>：类实例允许以<code>[]</code>形式调用</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim 配置]]></title>
        <id>https://Windrivder.github.io/Fn2Lt73Yn/</id>
        <link href="https://Windrivder.github.io/Fn2Lt73Yn/">
        </link>
        <updated>2018-01-25T11:05:07.000Z</updated>
        <content type="html"><![CDATA[<pre><code>&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 基本设置
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

&quot; 历史记录
set history=1000

&quot; 检测文件类型
filetype on

&quot; 针对不同的文件类型采用不同的缩进格式
filetype indent on

&quot; 允许插件
filetype plugin on

&quot; 启动自动补全
filetype plugin indent on

&quot; 文件自动检测外部更改
set autoread

&quot; 隐藏援助乌干达儿童的提示
set shortmess=atI

&quot; 禁用声音与图标
set noerrorbells
set novisualbell
set t_vb=

&quot; 禁止生成临时文件
set writebackup
set nobackup
set noswapfile
set viminfo='100,n$HOME/.vim/viminfo

&quot; 高亮显示当前行/列
set cursorline
&quot; set cursorcolumn

&quot; 智能的当前行高亮
&quot; autocmd InsertLeave,WinEnter * set cursorline
&quot; autocmd InsertEnter,WinLeave * set nocursorline

&quot; 退出后内容缓存在屏幕上
&quot; set t_ti= t_te=

&quot; 启用鼠标
set mouse-=a
&quot; set paste

set backspace=eol,start,indent
set whichwrap+=&lt;,&gt;,h,l
set showmatch
set nolinebreak

&quot; 退出确认
set confirm

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 界面排版设置
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

&quot; 显示行号
set number

&quot; 显示当前的行号列号
set ruler

&quot; 取消换行
&quot; set nowrap

&quot; 移动光标时，上下方显示的行数
&quot; set scrolloff=4

&quot; tab相关变更
set expandtab
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4

&quot; 缩进配置
set autoindent
set smartindent

&quot; buffer设置
set hidden
set wildmode=list:longest
set ttyfast

&quot; 搜索忽略大小写
set ignorecase

&quot; 搜索字符高亮
set hlsearch

&quot; 增量搜索模式
set incsearch

&quot; 有一个或以上大写字母时仍大小写敏感
set smartcase

&quot; 行内替换
set gdefault

&quot; 默认展开所有代码
set foldmethod=indent
set nofoldenable

&quot; 去掉 Scrollbar
set guioptions-=r
set guioptions-=L

&quot; 显示 tab
set list listchars=tab:&gt;-

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 文件编码及类型设置
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

set encoding=utf-8
set termencoding=utf-8

&quot; autocmd FileType make set noexpandtab

autocmd FileType php,python,c,java,perl,shell,bash,vim,ruby,cpp,go setlocal et sta sw=4 ts=4 sts=4
autocmd FileType javascript,html,css,xml setlocal et sta sw=2 ts=2 sts=2

au BufRead,BufNewFile *.wpy setlocal filetype=javascript
au BufRead,BufNewFile *.vue setlocal filetype=javascript

autocmd BufNewFile *.sh,*.py call AutoSetFileHead()
function! AutoSetFileHead()
    if &amp;filetype == 'sh'
        call setline(1, &quot;\#!/bin/bash&quot;)
    endif

    if &amp;filetype == 'python'
        call setline(1, &quot;#!/usr/bin/env python&quot;)
        call append(1, &quot;# -*- coding: utf-8 -*-&quot;)
        call append(2, &quot;&quot;)
        call append(3, &quot;from __future__ import unicode_literals&quot;)
        call append(4, &quot;from __future__ import absolute_import&quot;)
    endif

    normal G
    normal o
    normal o
endfunc

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 其他
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

&quot; 访问系统剪贴板
set clipboard=unnamed

&quot; 自动加载配置
&quot;autocmd! bufwritepost .vimrc source %

&quot; 自动切换工作目录
set autochdir

&quot; 自动补全配置
set completeopt=longest,menu

&quot; 增强模式中的命令行自动完成操作
set wildmenu wildmode=full

&quot; 关闭预览窗口
set completeopt-=preview

&quot; 更快的关键字补全
set complete-=i     &quot; disable scanning included files
set complete-=t     &quot; disable searching tags

&quot; 记住上次打开的位置
au BufReadPost * if line(&quot;'\&quot;&quot;) &gt; 0|if line(&quot;'\&quot;&quot;) &lt;= line(&quot;$&quot;)|exe(&quot;norm '\&quot;&quot;)|else|exe &quot;norm $&quot;|endif|endif

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 键位映射
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

&quot; esc
imap jk &lt;Esc&gt;

&quot; leader
&quot; let mapleader = &quot;\&lt;Space&gt;&quot;

&quot; vim 与 shell切换
noremap &lt;C-D&gt; :sh&lt;CR&gt;
noremap &lt;F2&gt; :set nu!&lt;CR&gt;
noremap &lt;F3&gt; :set paste!&lt;CR&gt;

set wildchar=&lt;Tab&gt; wildcharm=&lt;C-Z&gt;

&quot; 切换 buffer
noremap gt :bp&lt;CR&gt;
noremap gT :bn&lt;CR&gt;

noremap &lt;Leader&gt;r :call RunCode()&lt;CR&gt;
func! RunCode()
    exec &quot;w&quot;
    if &amp;filetype == 'java'
        exec &quot;!javac %&quot;
        exec &quot;!time java %&lt;&quot;
    elseif &amp;filetype == 'sh'
        exec &quot;!time sh %&quot;
    elseif &amp;filetype == 'python'
        exec &quot;!time python3 %&quot;
    elseif &amp;filetype == 'go'
        exec &quot;!time go run %&quot;
    elseif &amp;filetype == 'javascript'
        exec &quot;!time node %&quot;
    endif
endfunc

noremap &lt;Leader&gt;f :call FormatCode()&lt;CR&gt;
func! FormatCode()
    exec &quot;w&quot;
    if &amp;filetype == 'go'
        exec &quot;!gofmt -w %&quot;
    elseif &amp;filetype == 'python'

    endif
endfunc

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 配色
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

set t_Co=256
&quot; colorscheme desert
colorscheme gruvbox
set background=dark
hi LineNr ctermfg=245 ctermbg=235
hi CursorLine ctermbg=235 cterm=NONE guibg=Grey40
syntax on

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 命令总结]]></title>
        <id>https://Windrivder.github.io/md6tTOAUN/</id>
        <link href="https://Windrivder.github.io/md6tTOAUN/">
        </link>
        <updated>2017-03-28T09:25:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基本命令">基本命令</h2>
<pre><code class="language-shell"># 安装Git
$ sudo apt install git

# 配置个人信息
$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;

# 切换目录初始化
$ git init

# 文件添加到仓库
$ git add -p &lt;file&gt;

# 把文件提交到仓库
$ git commit -m &quot;add LICENSE&quot;

# 查看仓库当前状态
$ git status

# 查看difference
$ git diff

# 显示从最近到最远的提交日志
$ git log --pretty=oneline # 格式化输出信息

# 版本退回
$ git reset --hard HEAD^ # 当前版本HEAD,上一个版本HEAD^,上上个版本HEAD^^
$ git reset --hard 130f10a # 或HEAD~100

# 查看命令记录
$ git reflog

# 丢弃工作区的修改，回到最近一次git commit或git add时的状态：
$ git checkout -- README.md

# 把暂存区的修改撤销掉（unstage）
$ git reset HEAD READER.md

# 从版本库中删除该文件
$ git rm README.md
$ git commit -m &quot;remove READER.md&quot;

# 把误删的文件恢复到最新版本，checkout其实用版本库里的版本替换工作区的版本
$ git checkout -- README.md
</code></pre>
<h2 id="远程仓库">远程仓库</h2>
<pre><code class="language-shell">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;
# 测试是否成功
$ ssh -T git@github.com

# 把一个已有的本地仓库与之关联
$ git remote add origin git@github.com:Windrivder/Windrivder.git

# 把本地库的所有内容推送到远程库上（推送master分支的内容）
$ git push -u origin master

# 向远程库推送更新
$ git push origin master

# 从远程库克隆
$ git clone git@github.com:michaelliao/gitskills.git
</code></pre>
<h2 id="分支管理">分支管理</h2>
<pre><code class="language-shell"># 创建+切换dev分支
$ git checkout -b dev

# 相当于
$ git branch dev # 创建分支
$ git checkout dev

# 查看当前分支，当前分支前面标有×号
$ git branch

# 切换回master分支
$ git checkout master

# 合并指定分支到当前分支
$ git merge dev

# 删除dev分支
$ git branch -d dev

# 查看分支合并情况
$ git log --graph --pretty=oneline --abbrev-commit
*   59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 &amp; simple
|/
* fec145a branch test

# 删除feature1分支
$ git branch -d feature1

# 创建并切换dev分支
$ git checkout -b dev

# 修改readme.txt文件，并提交一个新的commit
$ git add readme.txt
$ git commit -m &quot;add merge&quot;

# 切换回master
$ git checkout master

# 合并dev分支，请注意--no-ff参数，表示禁用Fast forward
$ git merge --no-ff -m &quot;merge with no-ff&quot; dev

# 看看分支历史
$ git log --graph --pretty=oneline --abbrev-commit
*   7825a50 merge with no-ff
|\
| * 6224937 add merge
|/
*   59bc1cb conflict fixed

# 如果需要临时修复Bug，可以把当前工作现场“储藏”起来，等Bug修复后恢复现场后继续工作
$ git stash

# 此时查看工作区是干净
# 切换到需要修复Bug的分支，创建临时分支来修复
$ git checkout master
$ git checkout -b issue-101

# 修复完成后切换到master分支，完成合并，删除临时分支
$ git checkout master
$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101
$ git branch -d issue-101

# Bug修复后，切换回dev分支继续干活
$ git checkout dev

# 查看工作现场列表
$ git stash list

# 恢复工作现场
$ git stash pop # 恢复的同时把stash内容也删了
$ git stash apply # 恢复，不删除stash的内容，使用git stash drop

# 再次查看工作现场列表，干净
$ git stash list

# 可以多次stash，恢复时指定恢复
$ git stash apply stash@{0}

# 强行删除一个没有合并过的分支
$ git branch -D &lt;name&gt;

# 要查看远程库的信息
$ git remote
$ git remote -v

# 推送其他分支
$ git push origin dev

# 从远程库clone，默认情况只能看到master分支，需要在dev分支，必须创建远程origin的dev分支到本地
$ git checkout -b dev origin/dev
$ git checkout -b branch-name origin/branch-name
$ git branch --set-upstream branch-name origin/branch-name # 关联

# 向远程库推送dev有冲突
$ git pull # 抓取到本地合并解决冲突，再向远程推送
$ git push origin dev
</code></pre>
<h2 id="标签管理">标签管理</h2>
<pre><code class="language-shell"># 切换到需要打标签的分支
$ git branch
$ git checkout master

# 创建标签
$ git tag v1.0

# 查看所有标签
$ git tag

# 给历史提高的commit id打标签
$ git log --pretty=oneline --abbrev-commit # 查看commit id
$ git tag v0.9 6224937

# 查看标签信息
$ git show v0.9

# 创建带有说明的标签
$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164

# 用PGP签名标签
$ git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;

# 推送某个标签到远程
$ git push origin v1.0

# 一次性推送全部尚未推送到远程的本地标签
$ git push origin --tags

# 删除远程标签
$ git tag -d v0.9 # 删除本地
$ git push origin :refs/tags/v0.9 # 删除远程
</code></pre>
<h2 id="自定义-git">自定义 Git</h2>
<pre><code class="language-shell"># 显示颜色，会让命令输出看起来更醒目
$ git config --global color.ui true

# 忽略某些文件时，需要编写.gitignore，然后将.gitignore放到版本库中
# st就表示status
$ git config --global alias.st status

# 配置一个unstage别名
$ git config --global alias.unstage 'reset HEAD'
$ git unstage test.py # 等价于
$ git reset HEAD test.py

# 显示最后一次提交信息
$ git config --global alias.last 'log -1'

# log
git config --global alias.lg &quot;log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit&quot;
# 每个仓库的配置文件放在.git/config
# 当前用户的配置文件放在用户主目录下的一个隐藏文件.gitconfig中
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[优雅的 Python]]></title>
        <id>https://Windrivder.github.io/y_MY6rOKQ/</id>
        <link href="https://Windrivder.github.io/y_MY6rOKQ/">
        </link>
        <updated>2017-03-27T09:15:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="http://www.tuicool.com/articles/mQbqYfn">代码这样写不止于优雅（Python版） - 推酷</a></li>
<li><a href="http://python.jobbole.com/86808/">编写高效且优雅的 Python 代码（1） - Python - 伯乐在线</a></li>
<li><a href="https://www.zhihu.com/question/37751951">Python 有哪些优雅的代码实现？让自己的代码更pythonic</a></li>
</ol>
<h2 id="基础语法">基础语法</h2>
<pre><code class="language-python"># 尽可能少地引入变量
a, b = b, a	# 变量交换


# 赋值技巧
colors = 'red', 'green', 'blue', 'yellow'
red, green, blue, yellow = colors	# 适用于列表、元组等


# 字符串格式化
s = &quot;Welcome to {blog} and following {wechat}&quot;.format(blog=&quot;Windrivder.me&quot;, wechat=&quot;Windrivder&quot;)


# 字符串连接
colors = ['red', 'green', 'blue', 'yellow']
print('- '.join(colors))	# join() 在内存中只会产生一个字符串对象


# if/else 三目运算
text = '男' if gener = 'male' else '女'


# for/else 语句
for i in mylist:
    pass
else:	# else 会在 for 循环遍历结束后执行
    pass


# 链式比较
age = 19
if 18 &lt; age &lt; 60:
    print('Youg man')


# 判断真值
if arr:
    do_something()
if values:
    do_something()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://pic1.zhimg.com/v2-eb4e447e9946e24d6a72f9cb1e50cc00_b.png" alt="img" loading="lazy"></figure>
<h2 id="列表">列表</h2>
<pre><code class="language-python"># 列表推导式
[i * 2 for i in range(6)]	# 可以取代 map 和 filter
# 同时列表推导式会消耗大量内存，数据多时建议使用生成器表达式
list = (x ** 2 for x in range(0, 100000))


# list 是一个查询效率高于更新操作的数据结构，可适当考虑使用双向队列
from collections import deque
names = deque(['Jack', 'King', 'Betty', 'Windrivder'])	# 双向队形
names.popleft()
names.appendleft('Hello')


# 切片
items = range(10)
sub_items = items[1:4] # list[start:end:step]
odd_items = items[1::2]
copy_items = items[:] # 复制
reverse_items = items[::-1]	# 反序
item = items[0:-1]
--------------------------
 | P | y | t | h | o | n |
--------------------------
   0   1   2   3   4   5 
  -6  -5  -4  -3  -2  -1
--------------------------
</code></pre>
<h2 id="字典">字典</h2>
<pre><code class="language-python"># 获取字典元素
d = {'name': 'windrivder'}
d.get('name', 'jack')	# 第二个参数设置默认值


# 预设字典默认值
data = [('foo', 10), ('bar', 20), ('foo', 39), ('bar', 49)]
groups = {}
for (key, value) in data:	# 方式一
    groups.setdefault(key, []).append(value)


from collections import defaultdict	# 方式二
groups = defaultdict(list)
for (key, value) in data:
    groups[key].append(value)
# 字典推导式
numbers = [1, 2, 3]
my_dict = {number: number * 2 for number in numbers}
my_dict = {number: number * 2 for number in numbers if number &gt; 1}


# 遍历字典的 key 和 value
for k, v in d.items():
    print(k, '--&gt;', v)
</code></pre>
<h2 id="生成器">生成器</h2>
<pre><code class="language-python"># 生成器比列表更加节省内存
for i in range(6):
    print(i)


# 生成器无需一次性加载所有元素到内存
def fib(n):
    a, b = 0, 1
    while a &lt; n:
        yield a
        a, b = b, a + b
l = [i for i in fib(10)] # 列表会一次性把全部元素加载到内存中
</code></pre>
<h2 id="遍历">遍历</h2>
<pre><code class="language-python"># 带有索引位置的集合遍历
colors = ['red', 'green', 'blue', 'yellow']
for i, color in enumerate(colors):	# 传入第二个参数时迭代时加在 index 上的数值
    print(i, '--&gt;', color);


# 用 zip 同时遍历两个迭代器
list_a = ['a', 'b', 'c', 'd']
list_b = [1, 2, 3]
for letter, number in zip(list_a, list_b):
    print(letter, number)	# 只要有一个列表耗尽，迭代就会停止
# zip 遍历时返回一个元组
a = [1, 2, 3]
b = ['w', 'x', 'y', 'z']
for i in zip(a, b):
    print(i)


list_example = [i for i in range(5)]
iter_example = (i for i in range(5)) # 迭代器
set_example = {i for i in range(5)} # 集合


for i in reversed(list_example):	# 只能迭代 list，无法作用于集合和迭代器
    print(i)
# 反向迭代还可以在类里的 __reversed__ 方法实现
class Countdown:
    def __init__(self, start):
        self.start = start
    # 正向迭代
    def __iter__(self):
        n = self.start
        while n &gt; 0:
            yield n
            n -= 1
    # 反向迭代
    def __reversed__(self):
        n = 1
        while n &lt;= self.start:
            yield n
            n += 1
</code></pre>
<h2 id="装饰器">装饰器</h2>
<pre><code class="language-python"># 利用装饰器将与业务逻辑无关的代码抽离出来，同时可以在多个地方重复利用
def web_lookup(url, saved={}):
    if url in saved:
        return saved[url]
    page = urllib.urlopen(url).read()
    saved[url] = page
    return page
# Pythonic
import urllib.request as urllib	# Python 2.x: import urllib
import functools
def cache(func):
    saved = {}
    @functools.wraps(func)	# 以原函数为参数，保留原函数的各种信息
    def wrapper(url):
        if url in saved:
            return saved[url]
        else:
            page = func[url]
            saved[url] = page
            return page
    return wrapper
@cache
def web_lookup(url):
    return urllib.urlopen(url).read()
# 为已有函数增加 log 监控
def decorator_fun(fun):
    @functools.wraps(fun)
    def wrapper(*args, **kw):
        print('Current fun: ', fun.__name__)
        print('Position arguments: ', args)
        print('Key arguments: ', **kw)
        result = fun(*args, **kw)
        print(result)
    return wrapper
@decorator_fun
def add(a, b):
    return a + b
add(2, 3)
# 在原本的装饰器的外层又嵌套一个函数，就可以编写参数的装饰器
def read_file(filename='results.txt'):
    def decorator_fun(func):
        def new_fun(*args, **kw):
            result = func(*args, **kw)
            with open(filename, 'a') as f:
                f.write(result + '\n')
            return result
        return  new_fun
    return decorator_fun
@read_file(filename='log.txt')
def add(a, b):
    return a + b



# 编写类的 __call__ 方法，使类能够像函数一样的调用
from functools import wraps
class logResult(object):
    def __init__(self, filename='results.txt'):
        self.filename = filename
    def __call__(self, func):
        @wraps(func)
        def new_func(*args, **kw):
            result = func(*args, **kw)
            with open(filename, 'a') as f:
                f.write(result + '\n')
            return result
        self.send_notification()
        return new_func
    def send_notification(self):
        pass
@logResult('log.txt')
def add(a, b):
    return a + b
</code></pre>
<h2 id="上下文管理器">上下文管理器</h2>
<pre><code class="language-python"># 上下文管理器：在代码执行前，先进行准备工作，执行完成后，再做收尾工作
# 打开的资源记得要释放
with open('data.txt') as f:
    data = f.read()
# 通过自定义类的 __enter__ 和 __exit__ 方法，可以自定义一个上下文管理器
class ReadFile(object):
    def __init__(self, filename):
        self.file = open(filename, 'r')
    def __enter__(self):
        returnn self.file
    def __exit__(self, type, value, traceback):
        '''type, value, traceback 分别代表错误的类型、值、追踪栈'''
        self.file.close()
        return True	# 返回 True 代表不抛出错误


with ReadFile('test.txt') as file_read:
    for line in file_read.readlines():
        print(line)
# with 语句先暂存了 ReadFile 类的 __exit__ 方法
# 然后调用 __enter__ 方法，并将结果返回给 with 语句
# 读取完成后调用之前暂存的 __exit__ 方法，关闭了文件
</code></pre>
]]></content>
    </entry>
</feed>